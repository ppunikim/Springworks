<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.3.xsd">

	<context:component-scan base-package="com.callor.todo.service.auth" />
	
	<!-- 일부 자동설정과 인증할 때 함수를 사용할 수 있도록 만들어준다. -->
	<!--  intercept 는 모든걸 인증하게 하도록 하는 것이다. -->
	<sec:http auto-config="true" use-expressions="true">
		<sec:intercept-url pattern="/users/join" access="permitAll" />
		<sec:intercept-url pattern="/users/login" access="permitAll" />
		<sec:intercept-url pattern="/users/mypage" access="isAuthenticated()" />
		<sec:intercept-url pattern="/admin/**" access="isAuthenticated() AND hasRole('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/403" access="permitAll" />
		<sec:intercept-url pattern="/" access="isAuthenticated()" />

		<sec:access-denied-handler error-page="/403" />

		<sec:form-login />
		<sec:logout />
	</sec:http>
	
	<!-- 
	로그인 절차가 시작되면 AuthenticationProvider클래스에게
	요청을 하고, 로그인을 수행해라.는 말이다.
	AuthenticationProvider는 UserDetailsService에게 사용자
	정보를 요청해 DB로부터 데이터를 SELECT 한다.
	
	정상적인 절차가 완료되면 user와 token이 담긴 객체를 return 하여 
	Security에게 알려준다. 
	 -->
	<sec:authentication-manager>
		<sec:authentication-provider ref="authenticationProvider" />
	</sec:authentication-manager>	

</beans>
