<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 새로 만든 mapper폴더 파일의 역할은
SQL문을 xml 방식으로 작성하는 파일 	
 	SQL문을 Dao 클래스에 문자열로 작성을 하는데,
 	이 방식은 mybatis 3.5 이상에서만 사용할 수 있다.
 	또한 문자열로 작성하는 SQL은 상대적으로 오류가 발생할
 	확률이 높다.
 	그리고 다양한 sql문을 구현하기가 다소 불편하다.
 	
 	xml방식으로 SQL 을 작성하는 것은
 	전동적으로 mybatis에서 많이 사용하고
 	다양한 SQL구현이 유리하다.
 	
 	mybatis는 Dao interface와 mapper.xml파일을 조합하여
 	내부에서 실제 클래스를 구현한다. 
 -->
 <!-- 각 SQL에 부착된 resultType, parameterType
 			resultType= 메서드 리턴타입
 			parameterType= 매개변수 리턴타입
 	즉, resultType(결과타입)은 select *, findBy * method의 return type을 지정
 	parameterType(매개변수타입)은 insert, update의 매개변수 type을 지정 
  -->
<!-- *-mapper.xml 파일 -->

<mapper namespace="com.callor.school.persistance.StudentDao">
	
	<select id="selectAll" resultType="StudentVO">
		SELECT * FROM tbl_student
	</select>
	
	<select id="findById" resultType="StudentVO">
		SELECT * FROM tbl_student WHERE st_num = #{st_num}
	</select>
	
	<insert id="insert" parameterType="StudentVO">
		INSERT INTO tbl_student
		(
			st_num, 
			st_name, 
			st_grade, 
			st_addr, 
			st_tel
		) VALUES (
			#{st_num}, 
			#{st_name}, 
			#{st_grade}, 
			#{st_addr}, 
			#{st_tel}
		)
	</insert>
	 
	<update id="update" parameterType="StudentVO">
		UPDATE tbl_student SET 
			st_name = #{st_name}, 
			st_grade = #{st_grade}, 
			st_addr = #{st_addr}, 
			st_tel = #{st_tel}
			
		WHERE st_num = #{st_num} 
	</update>
	<delete id="delete">
		DELETE FROM tbl_student WHERE st_num = #{st_num}
	</delete>
	
</mapper>

<!-- mapper와 GenericDao를 연결해주는 것이다. -->
<!-- mapper에서 id들은 method역할을 한다. -->

